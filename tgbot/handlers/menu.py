import logging
from datetime import datetime

from aiogram import Dispatcher, types
from aiogram.types import Message

from tgbot.db.queries import Database
from tgbot.keyboards.inline import upgrade_subscription_kb, topics_keyboards
from tgbot.keyboards.reply import main_menu_keyboard
from tgbot.misc.states import MainMenuState


async def main_menu(m: Message, db: Database):
    if m.chat.type == types.ChatType.PRIVATE:
        if m.text == "–ú–µ–Ω—ñ“£ ”©—Ç—ñ–Ω—ñ—à—Ç–µ—Ä—ñ–º":
            applications = await db.get_user_orders(m.from_user.id)
            logging.info(applications[0])
            if not applications[0]:
                await m.answer("–°—ñ–∑–¥–µ –µ—à“õ–∞–Ω–¥–∞–π ”©—Ç—ñ–Ω—ñ—à –∂–æ“õ")
            else:
                applications = applications[0]
                for app in applications:
                    date = app['created_at']
                    input_date_time = datetime.fromisoformat(date[:-6])
                    human_readable_date_time = input_date_time.strftime("%d-%m-%Y %H:%M")
                    status = "–ú–∞“õ“±–ª–¥–∞–Ω–¥—ã" if app["is_approved"] else "“ö–∞–±—ã–ª–¥–∞–Ω–±–∞–¥—ã"
                    await m.answer_photo(
                        app["photo_uri"],
                        caption=f"”®—Ç—ñ–Ω—ñ—à: {app['id']}\n"
                                f"{app['days']} –∫“Ø–Ω–≥–µ\n"
                                f"–°–æ–º–∞: {app['cost']} —Ç–µ“£–≥–µ\n"
                                f"–ñ–∞–∑—ã–ª—ã–º: {status}\n"
                                f"–ë–µ—Ä—ñ–ª–≥–µ–Ω —É–∞“õ—ã—Ç—ã: {human_readable_date_time}"
                    )
        elif m.text == "–ú–µ–Ω—ñ“£ –∂–∞–∑—ã–ª—ã–º—ã–º":
            subscribe = await db.get_user_subscribe(m.from_user.id)
            if subscribe[0]:
                created_at_datetime = datetime.strptime(subscribe[0]["created_at"], "%Y-%m-%dT%H:%M:%S.%f%z")
                expiration_day_calculation = f"{subscribe[0]['expiration_days']} –∫“Ø–Ω."
                formatted_created_at = created_at_datetime.strftime("%d-%m-%Y")
                text_string = (
                    f"–ñ–∞–∑—ã–ª—ã–º –º–µ—Ä–∑—ñ–º—ñ {expiration_day_calculation} –∫“Ø–Ω\n"
                    f"–ë–µ—Ä—ñ–ª–≥–µ–Ω —É–∞“õ—ã—Ç—ã: {formatted_created_at}\n"
                    f"–ñ–∞–∑—ã–ª—ã–º {subscribe[0]['days']} –∫“Ø–Ω–≥–µ —Ä–µ—Å—ñ–º–¥–µ–ª–¥—ñ."
                )
                await m.answer(text_string,
                               reply_markup=upgrade_subscription_kb())
            else:
                await m.answer("–°—ñ–∑–¥–µ –±–µ–ª—Å–µ–Ω–¥—ñ –∂–∞–∑—ã–ª—ã–º –∂–æ“õ")
        elif m.text == "–¢—ñ—Ä–∫–µ–ª–≥–µ–Ω –∞—Ä–Ω–∞–ª–∞—Ä":
            await m.answer("–¢”©–º–µ–Ω–¥–µ —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω –∞—Ä–Ω–∞–ª–∞—Ä—ã“£—ã–∑ —Å—ñ–ª—Ç–µ–º–µ–ª–µ—Ä—ã –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω üëá",
                           reply_markup=topics_keyboards())
        else:
            await m.answer("–¢”©–º–µ–Ω–¥–µ –±–µ—Ä—ñ–ª–≥–µ–Ω –±–∞—Ç—ã—Ä–º–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑",
                           reply_markup=main_menu_keyboard())
            await MainMenuState.get_menu.set()
    else:
        ...


def register_menu(dp: Dispatcher):
    dp.register_message_handler(main_menu, state=MainMenuState.get_menu)
